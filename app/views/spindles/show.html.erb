<div class="signal-result" style="margin-top: 30px;">
  <span style="font-size:16px; padding-left:5px"> <span class="fa fa-table"></span>  Spindle ID: <span class="num_text"><%= @spindle_id %></span>
  <span style="font-size:16px; padding-left:5px"> <span class="fa fa-cogs"></span>  Cluster ID: <span class="num_text"><%= @cluster_id %></span>
  <div class = "col-sm-12" id="signal_show" style="padding: 30px 0px 10px 0px">
	</div>
</div>




<script>

signal_draw_single(<%= @data.to_json.html_safe%>,<%= @fs.to_json.html_safe %>);

function signal_draw_single(data,fs){
  var margin = {top: 0, right: 50, bottom: 30, left: 50},
      width = 960 - margin.left - margin.right,
      height = 500 - margin.top - margin.bottom;

  // parse the date / time

  var parseDate1 = d3.timeParse("%H:%M:%S");
  var parseDate = d3.timeParse("%H:%M:%S").parse;
  var bisectDate = d3.bisector(function(d) { return d.index; }).left;
  var start_rec_time = "00:00:00";

  // set the ranges
  var x = d3.scaleLinear().range([0, width]);
  var y = d3.scaleLinear().range([height, 0]);

  // define the line
  var valueline = d3.line()
      .x(function(d) { return x(d.index); })
      .y(function(d) { return y(d.rating); });

  var xAxis = d3.axisBottom(x).tickSize(-(height+5),0,0)
      .tickFormat(function(d) { return timetransform(d,fs);});
  // append the svg obgect to the body of the page
  // appends a 'group' element to 'svg'
  // moves the 'group' element to the top left margin
  var svg = d3.select("#signal_show").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
    .append("g")
      .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")");

  console.log(data)
  // format the data
  // data.forEach(function(d) {
  //     d.close = +d.close;
  // });

  // Scale the range of the data
  x.domain(d3.extent(data, function(d) { return d.index; }));
  y.domain([-105, 105]);
  // y.domain([-270.2768559212634, 281.818154773785]);
  // y.domain([d3.min(data, function(d) { return d.rating; }), d3.max(data, function(d) { return d.rating; })]);


  // Add the X Axis
  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis.tickValues(xAxisValue(fs,x.domain())));

  // Add the valueline path.
  svg.append("path")
      .data([data])
      .attr("class", "line")
      .attr("d", valueline)
      .style("stroke", "#0984e3")
      .style("stroke-width", 2);;

  // Add the Y Axis
  svg.append("g")
      .attr("class", "y axis")
      .call(d3.axisLeft(y));

  function timetransform(d,fs) {
    var time_split = start_rec_time.split(":");
    var totalSec = parseInt(time_split[0])*3600+parseInt(time_split[1])*60+parseInt(time_split[2]) + d/fs
    var hours = parseInt( totalSec / 3600 ) % 24;
    var minutes = parseInt( totalSec / 60 ) % 60;
    var seconds = parseInt(totalSec % 60);

    var result = (hours < 10 ? "0" + hours : hours) + ":" + (minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds  < 10 ? "0" + seconds : seconds);
    return result;
  };

  function xAxisValue(fs,len) {
    var xValues = d3.range(len[0], len[1]+2, fs);
    if(xValues.length <= 5){
      xValues.forEach(function(d,i){
        if(i > 0)
          xValues[i] = Math.floor(parseFloat(d)/parseFloat(fs)) * fs;
      });
      return xValues;
    }
    else{
      var size = Math.floor(xValues.length/5);
      index = xValues.filter(function(_,i){ return !(i%size) })
      index[index.length-1] = index[index.length-1] - 0.000000001 
      index[0] = index[0] * 0.99999999999 
      index.forEach(function(d,i){
        if(i > 0)
          index[i] = Math.floor(parseFloat(d)/parseFloat(fs)) * fs;
      });
      return index
    }
  };

}

</script>
